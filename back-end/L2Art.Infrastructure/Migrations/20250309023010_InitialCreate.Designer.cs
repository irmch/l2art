// <auto-generated />
using System;
using L2Art.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace L2Art.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250309023010_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("L2Art.Domain.Auctions.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Auction");
                });

            modelBuilder.Entity("L2Art.Domain.ItemNames.ItemName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<string[]>("AdditionalName")
                        .HasColumnType("text[]");

                    b.Property<int?>("AuctionCategory")
                        .HasColumnType("integer");

                    b.Property<int?>("Color")
                        .HasColumnType("integer");

                    b.Property<bool?>("CreateItemsList")
                        .HasColumnType("boolean");

                    b.Property<string>("DefaultAction")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EnchantBless")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCommissionStore")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDestruct")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDrop")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNpcTrade")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPrivateStore")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTrade")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("KeepType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("NameClass")
                        .HasColumnType("integer");

                    b.Property<int?>("Popup")
                        .HasColumnType("integer");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("TooltipBGDecoTexture")
                        .HasColumnType("text");

                    b.Property<string>("TooltipBGTexture")
                        .HasColumnType("text");

                    b.Property<string>("TooltipBGTextureCompare")
                        .HasColumnType("text");

                    b.Property<string>("TooltipTexture")
                        .HasColumnType("text");

                    b.Property<int?>("UseOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ItemName");
                });

            modelBuilder.Entity("L2Art.Domain.PrivateShops.PrivateShop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PrivateShops");
                });

            modelBuilder.Entity("L2Art.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("L2Art.Domain.Auctions.Auction", b =>
                {
                    b.OwnsOne("L2Art.Domain.Auctions.ItemInfo", "ItemInfo", b1 =>
                        {
                            b1.Property<Guid>("AuctionId")
                                .HasColumnType("uuid");

                            b1.Property<short>("AttributeType")
                                .HasColumnType("smallint")
                                .HasColumnName("AttributeType");

                            b1.Property<int>("Count")
                                .HasColumnType("integer")
                                .HasColumnName("Count");

                            b1.Property<short>("DarkAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("DarkAttribute");

                            b1.Property<short>("EarthAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("EarthAttribute");

                            b1.Property<short>("Enchant")
                                .HasColumnType("smallint")
                                .HasColumnName("Enchant");

                            b1.Property<short>("FireAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("FireAttribute");

                            b1.Property<short>("HolyAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("HolyAttribute");

                            b1.Property<int>("ItemId")
                                .HasColumnType("integer")
                                .HasColumnName("ItemId");

                            b1.Property<string>("ItemName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ItemName");

                            b1.Property<long>("ItemSlot")
                                .HasColumnType("bigint")
                                .HasColumnName("ItemSlot");

                            b1.Property<int>("ObjectId")
                                .HasColumnType("integer")
                                .HasColumnName("ObjectId");

                            b1.Property<int>("SoulCrystal1")
                                .HasColumnType("integer")
                                .HasColumnName("SoulCrystal1");

                            b1.Property<int>("SoulCrystal2")
                                .HasColumnType("integer")
                                .HasColumnName("SoulCrystal2");

                            b1.Property<int>("SoulCrystal3")
                                .HasColumnType("integer")
                                .HasColumnName("SoulCrystal3");

                            b1.Property<long>("StoreItemType")
                                .HasColumnType("bigint")
                                .HasColumnName("StoreItemType");

                            b1.Property<short>("WaterAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("WaterAttribute");

                            b1.Property<short>("WeaponAttributeStat")
                                .HasColumnType("smallint")
                                .HasColumnName("WeaponAttributeStat");

                            b1.Property<short>("WindAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("WindAttribute");

                            b1.HasKey("AuctionId");

                            b1.ToTable("Auction");

                            b1.WithOwner()
                                .HasForeignKey("AuctionId");
                        });

                    b.OwnsOne("L2Art.Domain.Auctions.ItemMetaData", "ItemMetaData", b1 =>
                        {
                            b1.Property<Guid>("AuctionId")
                                .HasColumnType("uuid");

                            b1.Property<long>("CommissionId")
                                .HasColumnType("bigint")
                                .HasColumnName("CommissionId");

                            b1.Property<int>("CommissionItemType")
                                .HasColumnType("integer")
                                .HasColumnName("CommissionItemType");

                            b1.Property<int>("DurationInDays")
                                .HasColumnType("integer")
                                .HasColumnName("DurationInDays");

                            b1.Property<int>("EpochSecondEndTime")
                                .HasColumnType("integer")
                                .HasColumnName("EpochSecondEndTime");

                            b1.Property<long>("PricePerUnit")
                                .HasColumnType("bigint")
                                .HasColumnName("PricePerUnit");

                            b1.Property<string>("SellerName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("SellerName");

                            b1.Property<short>("TypeOfModification")
                                .HasColumnType("smallint")
                                .HasColumnName("TypeOfModification");

                            b1.HasKey("AuctionId");

                            b1.ToTable("Auction");

                            b1.WithOwner()
                                .HasForeignKey("AuctionId");
                        });

                    b.OwnsOne("L2Art.Domain.Auctions.VisualInfo", "VisualInfo", b1 =>
                        {
                            b1.Property<Guid>("AuctionId")
                                .HasColumnType("uuid");

                            b1.Property<int>("VisualId")
                                .HasColumnType("integer")
                                .HasColumnName("VisualId");

                            b1.Property<string>("VisualIdName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("VisualIdName");

                            b1.HasKey("AuctionId");

                            b1.ToTable("Auction");

                            b1.WithOwner()
                                .HasForeignKey("AuctionId");
                        });

                    b.Navigation("ItemInfo")
                        .IsRequired();

                    b.Navigation("ItemMetaData")
                        .IsRequired();

                    b.Navigation("VisualInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("L2Art.Domain.PrivateShops.PrivateShop", b =>
                {
                    b.OwnsOne("L2Art.Domain.PrivateShops.ItemCount", "ItemCount", b1 =>
                        {
                            b1.Property<Guid>("PrivateShopId")
                                .HasColumnType("uuid");

                            b1.Property<int>("itemCount")
                                .HasColumnType("integer")
                                .HasColumnName("ItemCount");

                            b1.HasKey("PrivateShopId");

                            b1.ToTable("PrivateShops");

                            b1.WithOwner()
                                .HasForeignKey("PrivateShopId");
                        });

                    b.OwnsOne("L2Art.Domain.PrivateShops.ItemInfo", "ItemInfo", b1 =>
                        {
                            b1.Property<Guid>("PrivateShopId")
                                .HasColumnType("uuid");

                            b1.Property<short>("AttributeType")
                                .HasColumnType("smallint")
                                .HasColumnName("AttributeType");

                            b1.Property<short>("DarkAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("DarkAttribute");

                            b1.Property<short>("EarthAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("EarthAttribute");

                            b1.Property<short>("Enchant")
                                .HasColumnType("smallint")
                                .HasColumnName("Enchant");

                            b1.Property<short>("FireAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("FireAttribute");

                            b1.Property<short>("HolyAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("HolyAttribute");

                            b1.Property<long>("ItemSlot")
                                .HasColumnType("bigint")
                                .HasColumnName("ItemSlot");

                            b1.Property<int>("Ls1")
                                .HasColumnType("integer")
                                .HasColumnName("Ls1");

                            b1.Property<int>("Ls2")
                                .HasColumnType("integer")
                                .HasColumnName("Ls2");

                            b1.Property<int>("Ls3")
                                .HasColumnType("integer")
                                .HasColumnName("Ls3");

                            b1.Property<int>("SoulCrystal1")
                                .HasColumnType("integer")
                                .HasColumnName("SoulCrystal1");

                            b1.Property<int>("SoulCrystal2")
                                .HasColumnType("integer")
                                .HasColumnName("SoulCrystal2");

                            b1.Property<int>("SoulCrystal3")
                                .HasColumnType("integer")
                                .HasColumnName("SoulCrystal3");

                            b1.Property<short>("WaterAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("WaterAttribute");

                            b1.Property<short>("WeaponAttributeStat")
                                .HasColumnType("smallint")
                                .HasColumnName("WeaponAttributeStat");

                            b1.Property<short>("WindAttribute")
                                .HasColumnType("smallint")
                                .HasColumnName("WindAttribute");

                            b1.HasKey("PrivateShopId");

                            b1.ToTable("PrivateShops");

                            b1.WithOwner()
                                .HasForeignKey("PrivateShopId");
                        });

                    b.OwnsOne("L2Art.Domain.PrivateShops.TraderInfo", "TraderInfo", b1 =>
                        {
                            b1.Property<Guid>("PrivateShopId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ItemId")
                                .HasColumnType("integer")
                                .HasColumnName("ItemId");

                            b1.Property<string>("ItemName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ItemName");

                            b1.Property<int>("ObjectId")
                                .HasColumnType("integer")
                                .HasColumnName("ObjectId");

                            b1.Property<long>("Price")
                                .HasColumnType("bigint")
                                .HasColumnName("Price");

                            b1.Property<long>("Quantity")
                                .HasColumnType("bigint")
                                .HasColumnName("Quantity");

                            b1.Property<int>("StoreItemType")
                                .HasColumnType("integer")
                                .HasColumnName("StoreItemType");

                            b1.Property<byte>("StoreType")
                                .HasColumnType("smallint")
                                .HasColumnName("StoreType");

                            b1.Property<short>("TypeOfModification")
                                .HasColumnType("smallint")
                                .HasColumnName("TypeOfModification");

                            b1.Property<int>("VendorId")
                                .HasColumnType("integer")
                                .HasColumnName("VendorId");

                            b1.Property<string>("VendorName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("VendorName");

                            b1.Property<int>("x")
                                .HasColumnType("integer")
                                .HasColumnName("X");

                            b1.Property<int>("y")
                                .HasColumnType("integer")
                                .HasColumnName("Y");

                            b1.Property<int>("z")
                                .HasColumnType("integer")
                                .HasColumnName("Z");

                            b1.HasKey("PrivateShopId");

                            b1.ToTable("PrivateShops");

                            b1.WithOwner()
                                .HasForeignKey("PrivateShopId");
                        });

                    b.OwnsOne("L2Art.Domain.PrivateShops.VisualInfo", "VisualInfo", b1 =>
                        {
                            b1.Property<Guid>("PrivateShopId")
                                .HasColumnType("uuid");

                            b1.Property<int>("VisualId")
                                .HasColumnType("integer")
                                .HasColumnName("VisualId");

                            b1.Property<string>("VisualIdName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("VisualIdName");

                            b1.HasKey("PrivateShopId");

                            b1.ToTable("PrivateShops");

                            b1.WithOwner()
                                .HasForeignKey("PrivateShopId");
                        });

                    b.Navigation("ItemCount")
                        .IsRequired();

                    b.Navigation("ItemInfo")
                        .IsRequired();

                    b.Navigation("TraderInfo")
                        .IsRequired();

                    b.Navigation("VisualInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("L2Art.Domain.Users.User", b =>
                {
                    b.OwnsOne("L2Art.Domain.Users.PersonalData", "PersonalData", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.Property<string>("password")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Password");

                            b1.Property<string>("userName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("UserName");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("PersonalData")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
